//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Ichibankuji/Core/GachaSystem/UserInput/Inputs1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs1: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs1()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs1"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""f0a566be-fd56-4d6c-93f3-2157a079c7e0"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""21dcd750-066b-4017-acb1-2e79cc8169d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Release"",
                    ""type"": ""Button"",
                    ""id"": ""60059db5-d93d-4483-af88-29968c030613"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pointer"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2c63cb0a-ad0e-4c32-b159-3d54065324d9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveCameraStart"",
                    ""type"": ""Button"",
                    ""id"": ""f8d87d5f-8965-4e8c-a32d-cc84d214254d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveCameraEnd"",
                    ""type"": ""Button"",
                    ""id"": ""eebfd96a-04dd-4b2b-b789-c44c6c5151d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScorllDelta"",
                    ""type"": ""Value"",
                    ""id"": ""2b77f760-6f8c-412d-aaed-65ff381a8fc6"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07c173cd-6b1f-4131-b735-3bf1010df8f7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e86e6027-7270-4c35-8bdd-3ba306583eb0"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0eb99ca-3ff8-4cce-a1f6-e87182f090c0"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10d13080-12c3-410e-ae20-5063862178d5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""126d2a89-ebd9-45ca-b630-853c8d014d0b"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7896404-50e7-459c-9f2b-dcc70b97f9f7"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MoveCameraStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ea8bb5f-6a5e-472d-84e3-6312e4bc6316"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MoveCameraEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75ff7a59-8e08-4fbd-b5dd-b593ec9be859"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ScorllDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""8b3abcb8-332d-47b9-a2a1-efec0a0cce28"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Develop"",
            ""id"": ""e7f4b0e2-73c6-4085-8a82-d40c9b2d1d87"",
            ""actions"": [
                {
                    ""name"": ""GenerateTicket_OnePiece"",
                    ""type"": ""Button"",
                    ""id"": ""f08898b5-45ca-4e82-8c4c-e1d4b1b792b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GenerateTicket_咒術迴戰"",
                    ""type"": ""Button"",
                    ""id"": ""d3ec3c19-c27a-43b1-a355-9e9bc1b2a46c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StubBoardDisplaySwitcher"",
                    ""type"": ""Button"",
                    ""id"": ""9d195ef9-9e7c-495b-b67d-795f29f08d8c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RunOutOfTicket"",
                    ""type"": ""Button"",
                    ""id"": ""4af2aed5-afcc-45fc-aa5c-c68e20c6c6b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fed5685f-8ccc-41e1-be05-cf7b22c84cf1"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""GenerateTicket_OnePiece"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dad842e-4d44-4f01-a0f1-600087f13234"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""GenerateTicket_咒術迴戰"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec697ad5-8ed8-4d36-83eb-3e4e98aecce2"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""StubBoardDisplaySwitcher"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80939173-5b5e-4978-92f4-a11523a9bdab"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""RunOutOfTicket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""TouchScreen"",
            ""bindingGroup"": ""TouchScreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Click = m_Gameplay.FindAction("Click", throwIfNotFound: true);
        m_Gameplay_Release = m_Gameplay.FindAction("Release", throwIfNotFound: true);
        m_Gameplay_Pointer = m_Gameplay.FindAction("Pointer", throwIfNotFound: true);
        m_Gameplay_MoveCameraStart = m_Gameplay.FindAction("MoveCameraStart", throwIfNotFound: true);
        m_Gameplay_MoveCameraEnd = m_Gameplay.FindAction("MoveCameraEnd", throwIfNotFound: true);
        m_Gameplay_ScorllDelta = m_Gameplay.FindAction("ScorllDelta", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        // Develop
        m_Develop = asset.FindActionMap("Develop", throwIfNotFound: true);
        m_Develop_GenerateTicket_OnePiece = m_Develop.FindAction("GenerateTicket_OnePiece", throwIfNotFound: true);
        m_Develop_GenerateTicket_咒術迴戰 = m_Develop.FindAction("GenerateTicket_咒術迴戰", throwIfNotFound: true);
        m_Develop_StubBoardDisplaySwitcher = m_Develop.FindAction("StubBoardDisplaySwitcher", throwIfNotFound: true);
        m_Develop_RunOutOfTicket = m_Develop.FindAction("RunOutOfTicket", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Click;
    private readonly InputAction m_Gameplay_Release;
    private readonly InputAction m_Gameplay_Pointer;
    private readonly InputAction m_Gameplay_MoveCameraStart;
    private readonly InputAction m_Gameplay_MoveCameraEnd;
    private readonly InputAction m_Gameplay_ScorllDelta;
    public struct GameplayActions
    {
        private @Inputs1 m_Wrapper;
        public GameplayActions(@Inputs1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_Gameplay_Click;
        public InputAction @Release => m_Wrapper.m_Gameplay_Release;
        public InputAction @Pointer => m_Wrapper.m_Gameplay_Pointer;
        public InputAction @MoveCameraStart => m_Wrapper.m_Gameplay_MoveCameraStart;
        public InputAction @MoveCameraEnd => m_Wrapper.m_Gameplay_MoveCameraEnd;
        public InputAction @ScorllDelta => m_Wrapper.m_Gameplay_ScorllDelta;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Release.started += instance.OnRelease;
            @Release.performed += instance.OnRelease;
            @Release.canceled += instance.OnRelease;
            @Pointer.started += instance.OnPointer;
            @Pointer.performed += instance.OnPointer;
            @Pointer.canceled += instance.OnPointer;
            @MoveCameraStart.started += instance.OnMoveCameraStart;
            @MoveCameraStart.performed += instance.OnMoveCameraStart;
            @MoveCameraStart.canceled += instance.OnMoveCameraStart;
            @MoveCameraEnd.started += instance.OnMoveCameraEnd;
            @MoveCameraEnd.performed += instance.OnMoveCameraEnd;
            @MoveCameraEnd.canceled += instance.OnMoveCameraEnd;
            @ScorllDelta.started += instance.OnScorllDelta;
            @ScorllDelta.performed += instance.OnScorllDelta;
            @ScorllDelta.canceled += instance.OnScorllDelta;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Release.started -= instance.OnRelease;
            @Release.performed -= instance.OnRelease;
            @Release.canceled -= instance.OnRelease;
            @Pointer.started -= instance.OnPointer;
            @Pointer.performed -= instance.OnPointer;
            @Pointer.canceled -= instance.OnPointer;
            @MoveCameraStart.started -= instance.OnMoveCameraStart;
            @MoveCameraStart.performed -= instance.OnMoveCameraStart;
            @MoveCameraStart.canceled -= instance.OnMoveCameraStart;
            @MoveCameraEnd.started -= instance.OnMoveCameraEnd;
            @MoveCameraEnd.performed -= instance.OnMoveCameraEnd;
            @MoveCameraEnd.canceled -= instance.OnMoveCameraEnd;
            @ScorllDelta.started -= instance.OnScorllDelta;
            @ScorllDelta.performed -= instance.OnScorllDelta;
            @ScorllDelta.canceled -= instance.OnScorllDelta;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    public struct UIActions
    {
        private @Inputs1 m_Wrapper;
        public UIActions(@Inputs1 wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Develop
    private readonly InputActionMap m_Develop;
    private List<IDevelopActions> m_DevelopActionsCallbackInterfaces = new List<IDevelopActions>();
    private readonly InputAction m_Develop_GenerateTicket_OnePiece;
    private readonly InputAction m_Develop_GenerateTicket_咒術迴戰;
    private readonly InputAction m_Develop_StubBoardDisplaySwitcher;
    private readonly InputAction m_Develop_RunOutOfTicket;
    public struct DevelopActions
    {
        private @Inputs1 m_Wrapper;
        public DevelopActions(@Inputs1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @GenerateTicket_OnePiece => m_Wrapper.m_Develop_GenerateTicket_OnePiece;
        public InputAction @GenerateTicket_咒術迴戰 => m_Wrapper.m_Develop_GenerateTicket_咒術迴戰;
        public InputAction @StubBoardDisplaySwitcher => m_Wrapper.m_Develop_StubBoardDisplaySwitcher;
        public InputAction @RunOutOfTicket => m_Wrapper.m_Develop_RunOutOfTicket;
        public InputActionMap Get() { return m_Wrapper.m_Develop; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DevelopActions set) { return set.Get(); }
        public void AddCallbacks(IDevelopActions instance)
        {
            if (instance == null || m_Wrapper.m_DevelopActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DevelopActionsCallbackInterfaces.Add(instance);
            @GenerateTicket_OnePiece.started += instance.OnGenerateTicket_OnePiece;
            @GenerateTicket_OnePiece.performed += instance.OnGenerateTicket_OnePiece;
            @GenerateTicket_OnePiece.canceled += instance.OnGenerateTicket_OnePiece;
            @GenerateTicket_咒術迴戰.started += instance.OnGenerateTicket_咒術迴戰;
            @GenerateTicket_咒術迴戰.performed += instance.OnGenerateTicket_咒術迴戰;
            @GenerateTicket_咒術迴戰.canceled += instance.OnGenerateTicket_咒術迴戰;
            @StubBoardDisplaySwitcher.started += instance.OnStubBoardDisplaySwitcher;
            @StubBoardDisplaySwitcher.performed += instance.OnStubBoardDisplaySwitcher;
            @StubBoardDisplaySwitcher.canceled += instance.OnStubBoardDisplaySwitcher;
            @RunOutOfTicket.started += instance.OnRunOutOfTicket;
            @RunOutOfTicket.performed += instance.OnRunOutOfTicket;
            @RunOutOfTicket.canceled += instance.OnRunOutOfTicket;
        }

        private void UnregisterCallbacks(IDevelopActions instance)
        {
            @GenerateTicket_OnePiece.started -= instance.OnGenerateTicket_OnePiece;
            @GenerateTicket_OnePiece.performed -= instance.OnGenerateTicket_OnePiece;
            @GenerateTicket_OnePiece.canceled -= instance.OnGenerateTicket_OnePiece;
            @GenerateTicket_咒術迴戰.started -= instance.OnGenerateTicket_咒術迴戰;
            @GenerateTicket_咒術迴戰.performed -= instance.OnGenerateTicket_咒術迴戰;
            @GenerateTicket_咒術迴戰.canceled -= instance.OnGenerateTicket_咒術迴戰;
            @StubBoardDisplaySwitcher.started -= instance.OnStubBoardDisplaySwitcher;
            @StubBoardDisplaySwitcher.performed -= instance.OnStubBoardDisplaySwitcher;
            @StubBoardDisplaySwitcher.canceled -= instance.OnStubBoardDisplaySwitcher;
            @RunOutOfTicket.started -= instance.OnRunOutOfTicket;
            @RunOutOfTicket.performed -= instance.OnRunOutOfTicket;
            @RunOutOfTicket.canceled -= instance.OnRunOutOfTicket;
        }

        public void RemoveCallbacks(IDevelopActions instance)
        {
            if (m_Wrapper.m_DevelopActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDevelopActions instance)
        {
            foreach (var item in m_Wrapper.m_DevelopActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DevelopActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DevelopActions @Develop => new DevelopActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchScreenSchemeIndex = -1;
    public InputControlScheme TouchScreenScheme
    {
        get
        {
            if (m_TouchScreenSchemeIndex == -1) m_TouchScreenSchemeIndex = asset.FindControlSchemeIndex("TouchScreen");
            return asset.controlSchemes[m_TouchScreenSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnRelease(InputAction.CallbackContext context);
        void OnPointer(InputAction.CallbackContext context);
        void OnMoveCameraStart(InputAction.CallbackContext context);
        void OnMoveCameraEnd(InputAction.CallbackContext context);
        void OnScorllDelta(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
    }
    public interface IDevelopActions
    {
        void OnGenerateTicket_OnePiece(InputAction.CallbackContext context);
        void OnGenerateTicket_咒術迴戰(InputAction.CallbackContext context);
        void OnStubBoardDisplaySwitcher(InputAction.CallbackContext context);
        void OnRunOutOfTicket(InputAction.CallbackContext context);
    }
}
